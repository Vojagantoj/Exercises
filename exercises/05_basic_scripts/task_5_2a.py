# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
p = input('Введите адрес в формате x.x.x.x/x: ')
m = p.split('.')
k = m.pop(-1).split('/')
m.append(k[0])
ip_bin = '''
{0:08b}{1:08b}{2:08b}{3:08b}
'''
l = ip_bin.format(int(m[0]), int(m[1]), int(m[2]), int(m[3]))
g = l[0:(int(k[1]) + 1)] + '0' * (32 - int(k[1]))
z = g[1:9], g[9:17], g[17:25], g[25:]
s = list()
s.append(int(z[0], 2))
s.append(int(z[1], 2))
s.append(int(z[2], 2))
s.append(int(z[3], 2))
j = '1' * int(k[1]) + '0' * (32 - int(k[1]))
l = (j[:8], j[8:16], j[16:24], j[24:])
t = list()
t.append(int(l[0], 2))
t.append(int(l[1], 2))
t.append(int(l[2], 2))
t.append(int(l[3], 2))
ip_template = '''
Network:
{0:<10}  {1:<10}  {2:<10}  {3:<10}
{0:08b}    {1:08b}    {2:08b}    {3:08b}

Mask:
/{4}
{5:<10}  {6:<10}  {7:<10}  {8:<10}
{5:08b}    {6:08b}    {7:08b}    {8:08b}
'''
print(ip_template.format(int(s[0]), int(s[1]), int(s[2]), int(s[3]), k[1], int(t[0]), int(t[1]), int(t[2]), int(t[3])))
